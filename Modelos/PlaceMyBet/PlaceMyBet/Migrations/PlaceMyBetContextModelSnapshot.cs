// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaceMyBet.Models;

namespace PlaceMyBet.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    partial class PlaceMyBetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PlaceMyBet.Models.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Cuota")
                        .HasColumnType("double");

                    b.Property<double>("Dinero_apostado")
                        .HasColumnType("double");

                    b.Property<string>("Fecha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MercadoID")
                        .HasColumnType("int");

                    b.Property<string>("Tipo_apuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioEmail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaId");

                    b.HasIndex("MercadoID");

                    b.HasIndex("UsuarioEmail");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaId = 1,
                            Cuota = 1.8999999999999999,
                            Dinero_apostado = 200.0,
                            Fecha = "2020-11-05 14:57:16",
                            MercadoID = 1,
                            Tipo_apuesta = "Over",
                            UsuarioEmail = "ejemplo@ejemplo.es"
                        },
                        new
                        {
                            ApuestaId = 2,
                            Cuota = 1.5,
                            Dinero_apostado = 100.0,
                            Fecha = "2020-11-05 14:57:16",
                            MercadoID = 1,
                            Tipo_apuesta = "under",
                            UsuarioEmail = "ejemplo@ejemplo.es"
                        },
                        new
                        {
                            ApuestaId = 3,
                            Cuota = 1.78,
                            Dinero_apostado = 50.0,
                            Fecha = "2020-11-05 14:57:16",
                            MercadoID = 1,
                            Tipo_apuesta = "Over",
                            UsuarioEmail = "ejemplo@ejemplo.es"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Cuenta", b =>
                {
                    b.Property<int>("CuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre_banco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Num_tarjeta")
                        .HasColumnType("double");

                    b.Property<double>("Saldo")
                        .HasColumnType("double");

                    b.Property<string>("UsuarioID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CuentaId");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            CuentaId = 1,
                            Nombre_banco = "Mibanco",
                            Num_tarjeta = 55555555.0,
                            Saldo = 800.0,
                            UsuarioID = "ejemplo@ejemplo.es"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Equipo_local")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Equipo_visitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fecha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Goles_totales")
                        .HasColumnType("int");

                    b.HasKey("EventoId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            EventoId = 1,
                            Equipo_local = "Valencia",
                            Equipo_visitante = "Barcelona",
                            Fecha = "2020-04-08",
                            Goles_totales = 5
                        },
                        new
                        {
                            EventoId = 2,
                            Equipo_local = "Valencia",
                            Equipo_visitante = "Madrid",
                            Fecha = "2020-04-08",
                            Goles_totales = 7
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Apostado_over")
                        .HasColumnType("double");

                    b.Property<double>("Apostado_under")
                        .HasColumnType("double");

                    b.Property<double>("Cuota_over")
                        .HasColumnType("double");

                    b.Property<double>("Cuota_under")
                        .HasColumnType("double");

                    b.Property<int>("EventoID")
                        .HasColumnType("int");

                    b.Property<double>("OverUnder")
                        .HasColumnType("double");

                    b.HasKey("MercadoId");

                    b.HasIndex("EventoID");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 1,
                            Apostado_over = 700.0,
                            Apostado_under = 700.0,
                            Cuota_over = 1.8999999999999999,
                            Cuota_under = 1.8999999999999999,
                            EventoID = 1,
                            OverUnder = 1.5
                        },
                        new
                        {
                            MercadoId = 2,
                            Apostado_over = 100.0,
                            Apostado_under = 100.0,
                            Cuota_over = 1.8999999999999999,
                            Cuota_under = 1.3999999999999999,
                            EventoID = 2,
                            OverUnder = 1.5
                        },
                        new
                        {
                            MercadoId = 3,
                            Apostado_over = 100.0,
                            Apostado_under = 200.0,
                            Cuota_over = 1.8999999999999999,
                            Cuota_under = 1.8999999999999999,
                            EventoID = 1,
                            OverUnder = 1.0
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Usuario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Email");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Email = "ejemplo@ejemplo.es",
                            Apellidos = "Lucas",
                            Edad = 21,
                            Nombre = "Ricardo"
                        },
                        new
                        {
                            Email = "ejemplo2@ejemplo2.es",
                            Apellidos = "Lucas",
                            Edad = 22,
                            Nombre = "Ricardo2"
                        });
                });

            modelBuilder.Entity("PlaceMyBet.Models.Apuesta", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Mercado", "Mercado")
                        .WithMany("Apuestas")
                        .HasForeignKey("MercadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBet.Models.Usuario", "Usuario")
                        .WithMany("Apuestas")
                        .HasForeignKey("UsuarioEmail");
                });

            modelBuilder.Entity("PlaceMyBet.Models.Cuenta", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("PlaceMyBet.Models.Cuenta", "UsuarioID");
                });

            modelBuilder.Entity("PlaceMyBet.Models.Mercado", b =>
                {
                    b.HasOne("PlaceMyBet.Models.Evento", "Evento")
                        .WithMany("Mercados")
                        .HasForeignKey("EventoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
